%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 560.000000 325.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.5.2 (Build 20G95) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 560 325
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 560 325
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /three put
dup 34 /two put
dup 35 /asterisk put
dup 36 /eight put
dup 37 /five put
dup 38 /one put
dup 39 /six put
dup 40 /four put
dup 41 /space put
dup 42 /fi put
dup 43 /l put
dup 44 /t put
dup 45 /r put
dup 46 /o put
dup 47 /s put
dup 48 /c put
dup 49 /n put
dup 50 /v put
dup 51 /u put
dup 52 /ccedilla put
dup 53 /atilde put
dup 54 /p put
dup 55 /a put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000186670676D00000000000000B400000428676C796600000000000004DC000015E8686561640000000000001AC400000036686865610000000000001AFC00000024686D74780000000000001B20000000646C6F63610000000000001B84000000346D6178700000000000001BB800000020707265700000000000001BD80000004D14000014004B005A00000011FF3A000B0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546

00025D411B0009003500190035002900350039003500490035005900350069003500790035008900350099003500A9003500B9003500C90035000D5DB8001B10B80040DC00BA000D001600032BB8000D10BA0027003200032BB8002710BA003A000300032BB8003A10B8000310B80001D0B800012FBA001F0003003A111239B8003A10B8003DD0303113153633321E0215140E022322262723061E0233323E0235342627353E0135342E0223220E020733343E0233321615140E022B01222322DA181B20372818192A381F494C025501213E5836325942273F412A38213A4F2E3551361D02551021332236481625311B12050504019548031123332120332313574537563B1E1B365135405E0E02134A3031482E17223C54331F382A1939391C2C1D0F000002001C0000020302C50003000E0051BA0004000000032BB8000410B8000010B80009D0B8000410B8000BD0B8000410B80010DC00B800052FB8000A2FBA0001000800032BB8000110BA0003000A0005111239B80004D0B8000810B8000CD030312523133313112301152115333533350153EEEC025044FEBD01375060F1015BFEA501D4FE3352A6A64B000000010023FFF501FD02B9002B00ADB8002D2FBA0016001700032BB8001610B80002D0B8001610B80004D0B800042FB8002D10B80021DCB8000CDC410500DA000C00EA000C00025D411B0009000C0019000C0029000C0039000C0049000C0059000C0069000C0079000C0089000C0099000C00A9000C00B9000C00C9000C000D5DBA002A0017002111123900BA0011001C00032BB8001110BA0001000000032BB8000110BA0026000700032BB8002610BA002A00070026111239303101352103173E0133321E0215140E0223222E0227231E0333323E0235342E0223220607273701D6FEA2424919412A243B2A171829371E20352717025501243E512E3E5D3E1F243E542F2449170226026E4BFE90041E25182B3B232A3F2A1513232F1B304C331B2742552D3D5B3D1E191A02CC00000000020026FFF5020702C50023003700E3BA001C000900032BB8001C10BA0013002900032BB8001310411B0006001C0016001C0026001C0036001C0046001C0056001C0066001C0076001C0086001C0096001C00A6001C00B6001C00C6001C000D5D410500D5001C00E5001C00025D410500DA002900EA002900025D411B0009002900190029002900290039002900490029005900290069002900790029008900290099002900A9002900B9002900C90029000D5DB8000910B80033DCB8001310B80039DC00BA002E000E00032BB8002E10BA0004002100032BB8000410BA0018002400032BB8001810B8000410B80000DC303101332E0123220E0215141E0233323E0235342E0223220607273E0333321607321E0215140E0223222E0235343E




002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 25 dict dup begin
/.notdef 0 def
/space 1 def
/asterisk 2 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/five 7 def
/six 8 def
/eight 9 def
/a 10 def
/c 11 def
/l 12 def
/n 13 def
/o 14 def
/p 15 def
/r 16 def
/s 17 def
/t 18 def
/u 19 def
/v 20 def
/atilde 21 def
/ccedilla 22 def
/fi 23 def
/tilde 24 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4203806 def
currentdict end
currentfile eexec

CE833FFB022385AFE3F8A1E9BC02C6F02A4CF413CC98F3DCDFB54A7B4FA72B049BC49E0B955A0ECCB45BFCA4DF0461EF81DF9A3CBB09812BF2585EB7534C1DEFC8759BB028FC93309A7B713930A149385F369D07EE84C3BF0AB87D056E52ABEAA41EA3C207B253FAFE490E5CF13BE65A1793D9C6C3F5086E64DDEDCD388DC8BF1A2B5F5FBB1DEF461C1F6F3CBC0B56E1A7F118E90B7044CB611E53D0564D869EC6ED4B4C3D2CDCE92B7E022F9DE912A00755C3A1959EB6C3AF472A91E6FF8B7B30576420756B2474F9BA9735F8970C86CC52E5B4B344771A5C0A81BEA09B651905B91863464498C42D1F4F411ED261D736B8D1CEC1F4158EDE70E1E2C9D067033E79A2E52901080584AB336D232F6FF2E0285578648A58E7A3C3EB4C7C2BF2869ACFF773AAEADCB075145A8B4C8D2D2DC0D52461C3D19D9E94D45339E607F9B433936C871C009DA7F6709DC9CAD8571F3E6C20F5B81F292552055CD86434B9405C5F9C47D92825CBE39695E162FFEABA2A8ACE3FC1D071B18D9F87AF3F3BEC3162A9144345972C48B71BD921B3ED166D73D2B52B4024081324F69F87A32BF5A6893C90213AF8A54EA70CF3AE5F2AAA00D5984D6652201CE01089E037886D475C46B82096BB02F112099CEBDEA36F36076E65E62361D2C8BDA7B70B7C37F49344E53259231ECC89FEF8333BEF415E400ECE81555E5AD8CEC18A3903324C9131FAF4656FDE909CE52F5B0E543321FAD5AB98E020139F23F0AD1542BC9FCCE802C466DFF4D51D68898CAFC8CA67690B3F68D39705E6756F2A256C27940F4263E9427F6D22552F50D6F9D447D08EDAE6E9AD0A0FA553C155B95510321E6AA4B7DBF257989613C5348BBB76B3DBD19C1E2C0695391DA82677F15FC4D92B0C28266CAE765D008D095865E1899715D1D43507FBC694FDAA0AF9834693FA43BFD507478F23AE2152C2BFAB156CAC1F062924BFAB55837BE382B5F03129C919C47DF1FD4E0CA18F91FBD627D0AF2773FDEDE93DA083799CB16098A8CB18ECB329BEB37248B19FF62CDB691132318AA20FB84CF23C49A6C527B3501DB0DC3424B89FA9F850F3E1BCD0DFCAABCFB187345B2E3B8F2D9F8DFD9621948C4B48EC9FFDFB76875D9C16215A21E89D9447CBDD1BD574536F5417DA889116162EA470C06F6DFEA711C220CD5638894B0561654D27456EC81223FFA919BBE9415E04E5C060E70635EF32FF6571B65BF7E62883692F3E0E52AE17BA0003F8BD899BC680641E8C43D79E99CB9F6C3D75CE547648AA8392FDD0C1B52C27A3B7EB2002048AE0F7A13B8C6100122084846149B7F3533D08399C4D557B2D7359EDC45ED176C35215BF4062B04A834B5A12E21BB26133E57B92DA2D2DF3BA4F05C0C23AF82CF3EA5A9B81D8ECB8101CD26075810A731BFC6C9B3E0E3330F0FD0CCFBE83AA0575FE28CB4DFAE8
D9BA25172B80F53A2413B615184E9D435226C675B1256F3F131FF0A36E06986D49B57AE1171C01E0119D66C1FBB2EE905080BD264649EE856EE396373FFFC0B8C8311AF09BD1E4E3B483620DBD069477454C1F9EDCB511409E5F44C466E2776B974814760ECFF0F5DF2F04EAD3B1D775A26C118DAE31F0096919BC87791E65DC04B16B5933D3553D64B391F599FD1BDF72231C4C68D79BCBE201E6F8CE1E6D812019EFF4A0B492884C4B315FCAB8267CEC85720FBBD95928B9FDE3B32DD376C67406884EAB69508F9E5FB354FE97D67768F95446F8E0BFB02D7B86DCEA4DFF72703E2759746EFB5BB769A3D2539FE829BB136F0B21B494EE5B81A989E5BF6B3B2CE9E5F45D46481406272135546B4F36659AD22D854C67B40A166CE41960B169B8AAB284139FCB8CA13CA1E7FCEDF0E51269B9170DCFEFF7A3C2BCFB7106CE3644E2B8A766482D8A25892B807E33C38DDB9677CD92F8BF7F04547393F13E76AAB83762E22F90130433965F1B5143CC6CE4B8E8486E0DF3A9AA0D2AE79CD7A44E98D8E1CCAEADBC5447640DA67A56814D72B75469F9E5F6D31FFAAA152CBE197D321A5CD3BC228B4FB5E0AA2FB38213270411CF01EA01FB7A31F095B2865BB12F8FFEFCB829DC1C41F71129FDEEEB612C28C87248FA57098CB2003C6543B9209871FD0A3DF0E4A7829CBA0A37E290B5505CCCFF750609FF6B82A834C0120625A99C274D619A72C61C949E4A27E9C2DB2AE63AAAF493F9B49B75CF0E5FE3F71FD16CEC85F458087B68C3A90B724E0318218D1FB83F95ED1DA61D2931E954B15A8C858780E57CF70EE59454E6CE9428446A6BFBE38710D18B30AA1CDC4418ED3E2A0C37AB3260C12C6D02D332B1A4E1B135BD5731F979C98AE835679F48CF2F2D6B689AAA7E75A503FBBCE96E62ADCB7AF52EEA150A938388DBF7C647D85156289E441EA4C8FD56E6323880AE9674DAD8496AB6B372F9F0672DD42891FEF9C61FCE7BD2B484BE8818E54FF9F707F0DB15F75114F258AF87D1999231D6C58983F595401B0CD615E42F7AA0F2152A7AF047D60647C4581C01621F11D9CCA2846E7C1FA338BAEC9A8B5C72871BB8BCF396AF973DE1B04287DF570DF0E2783215135F12FF0D7D048FCEF536C9D6D5D791CEFB4E76E3240BE9FFD0FF4BA7BDED290530E0450370E650DA6201B61284DA56038BF38D2E202D42B1C6D751F88F75F11A0C1E9BD732E745B76B980483CEC3D2E494F73274D96DB0836A552845B7F1BF9D2EE4FEFE4964D46D19BA5D5CDD305D2E5883BD7ECE1DA092ED0F3EEC1DF4FD9BA366BAD57783D27EA42D446A8A22FB43A4445B4BC716E04C9789D7ABA0D89FD6D21E8215FE4C34BDE5E4A5886E79E47D83B12354C8CE1D2934525F0B8E0EAFDD4C91BFD733A8B2C1CEA9FDD3EC92DBE71AF69E7AC6BB03C77A2845D5EB877A5FF646

76F07FE69CB69F970F745F6C5851466050942AAAC2EF9B5993B55360877CE27366B8670B10D8A63FB7388E889ECE7C1C5C0E5EA4A093531630BA9AFE1E040D70C2685C7F1B2C71C36A074D56D1558717326E4A1A4509692AB674D27A23A10B47939BACDC5B128DB508D9003F2B731E53C4A79F4905FB90899373C5AD0D57DA5E923471C818962FAE933D8687E3AAAB29759D6CE7D392DD812ACC9D16D927786DDA70775B2738FA13C08E6EBB04212A0BA9FFDC0A5E6FE18FB0C54DA24092BFF3723AD52FD1F958A73C87CEAD59627117BA702AEB93C4134A0CC3F10343A86DBB519AAA2DE942BA1C835321A54D7E95B16B0C63A7A309FEA14382A50FD5F57F5E6A19B52E03906032C0FE3E290E54C63D86C320D547671A8EF3B3CEC95E80BD36F06F25F7BBD0CAA02E874F642980F326F43A4527C0B89B28527324369C43AE17FFDB0953EF6B46A608079B2CD8C3550C57C39A01FC2E5D60964572669CD002030CE98495E2DBC982E9E8371EDEFE4400D1AAFBBC21845720997964A409245DE594BE1E03DF2B4D3E7339B49EC14337874137B3C9E79D30D5E44B2C1129ADE6A1D6230E05B7B7CE4D2AF3243EC663AD157107017055178166EA08AA9CB0D5113A93A65A86963653674005D313E3C56B450A3D77FD596DD3343FA2C91CA5AD2C60652EDD71633E98DA5276A04F8579F2D6738C93EFEBC3E21B12B40BA42D37CE5BACA1C48AECFC43078C4CE0D667FE1A1FF2C66CB3BFD1355E1845592238100C613740BF4B3644505681EF245C945C215C48895350600898148D5A46C52394C165527B641F1F30CDFBD6259923232C59B4810141ACCB7F63A200AD8539F45745B9E1A5087F55237796F3A9B37B0FA8F430C0A1AC68EB388CD2C3237F9ABCB9B336741EDF01E7A047677FE708323418DBE20B3EAF07F7EB504BA9420C20DE1B3D7BF9F586065BBD6A24C7633591045897A0CB9F84B4D81DB3023F90B394AB019576D77035171461B31630F2E3DDB4B8992CA7217E197570EBF5318FC4101C36D14CDDDEE85AE442689B71C97F15D6086F3F12188A7AF39BCED675089610DA53A978EB03ACFFB8525553440935862BC8FCDF11018FA8A4F86FF252C8AC2144955939EEAE66BD9D287F9EC516647A463C9E41BA0C2CD405EF8B795C712C4EE46380FB009BEEDA55CFAAD3E442A5912FC7018F49F1A500F858EBC67FA1CCBBFEE43D6C5D72468D215991C00779D633DF149BBA5184E5240F90BB015B9D0551997806250D7298885BC5BBA23B8CCCB4F478A13A70D855E518D15272331EC5A8A2EC2B42B7C6DED8E825EF161BF5232BE5E3E5BC47E1926D9B530E429962DF77F1BDD60FC38529E19B04F19F2025BE84DF75B36260C5FA50EF2084C1D4A4CD406AD8F4B1A3FF7CC4E0528753999629877C29A1A1DEEC755052378377A955AA23CB4D46FB
8C7A30A54C268F5CD1BC4304A8947ABE868FB760B0AC69975BE9054CB3CF35E6D59ABEF193E1A31D0001E65F6A554C41B4D68BEE8446A76D49E91C31F0C6CFD05A941DFB740032ABDC6A6A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 560 325 rc
0 325 m
560 325 l
560 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-446 668 m
1006 668 l
1006 -343 l
-446 -343 l
h
-446 668 m
f
376.14252 111.39799 m
445.79651 111.39799 l
450.76709 111.39799 454.79651 107.36856 454.79651 102.39799 c
454.79651 47.597996 l
454.79651 42.627434 450.76709 38.597996 445.79651 38.597996 c
376.14252 38.597996 l
371.17197 38.597996 367.14252 42.627434 367.14252 47.597996 c
367.14252 102.39799 l
367.14252 107.36856 371.17197 111.39799 376.14252 111.39799 c
h
376.14252 111.39799 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
1071.1426 496.60199 m
1140.7965 496.60199 l
1145.7671 496.60199 1149.7965 500.63144 1149.7965 505.60199 c
1149.7965 560.40198 l
1149.7965 565.37256 1145.7671 569.40198 1140.7965 569.40198 c
1071.1426 569.40198 l
1066.172 569.40198 1062.1426 565.37256 1062.1426 560.40198 c
1062.1426 505.60199 l
1062.1426 500.63144 1066.172 496.60199 1071.1426 496.60199 c
h
1071.1426 496.60199 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
408.00052 91.197998 m
425.99652 91.197998 l
425.99652 71.197998 l
408.00052 71.197998 l
h
408.00052 91.197998 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
1103.0005 516.802 m
1120.9965 516.802 l
1120.9965 536.802 l
1103.0005 536.802 l
h
1103.0005 516.802 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
403.89853 85.197998 m
421.89453 85.197998 l
421.89453 65.197998 l
403.89853 65.197998 l
h
403.89853 85.197998 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
1098.8986 522.802 m
1116.8945 522.802 l
1116.8945 542.802 l
1098.8986 542.802 l
h
1098.8986 522.802 m
S
0 i
1 0.25 0.25 sc
CM
369.40002 299.92801 m
469.20001 299.92801 l
469.20001 199.15199 l
369.40002 199.15199 l
h
369.40002 299.92801 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
1064.4 308.07199 m
1164.2001 308.07199 l
1164.2001 408.84799 l
1064.4 408.84799 l
h
1064.4 308.07199 m
S
0 i
0.25 0.25 1 sc
CM
365.54602 292.20401 m
465.34601 292.20401 l
465.34601 191.42799 l
365.54602 191.42799 l
h
365.54602 292.20401 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
1060.546 315.79599 m
1160.3461 315.79599 l
1160.3461 416.57199 l
1060.546 416.57199 l
h
1060.546 315.79599 m
S
0 i
1 1 1 sc
CM
41.200012 323.57599 m
161.20001 323.57599 l
161.20001 203.57599 l
41.200012 203.57599 l
h
41.200012 323.57599 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
736.20001 284.42401 m
856.20001 284.42401 l
856.20001 404.42401 l
736.20001 404.42401 l
h
736.20001 284.42401 m
S
0 i
1 0.25 0.25 sc
CM
41.200012 323.57599 m
74.200012 323.57599 l
74.200012 314.97598 l
41.200012 314.97598 l
h
41.200012 323.57599 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
736.20001 284.42401 m
769.20001 284.42401 l
769.20001 293.02402 l
736.20001 293.02402 l
h
736.20001 284.42401 m
S
0 i
1 1 1 sc
CM
33.60001 316.29999 m
153.60001 316.29999 l
153.60001 196.3 l
33.60001 196.3 l
h
33.60001 316.29999 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
728.60004 291.70001 m
848.60004 291.70001 l
848.60004 411.70001 l
728.60004 411.70001 l
h
728.60004 291.70001 m
S
0 i
0.25 0.25 1 sc
CM
33.60001 316.79999 m
66.600014 316.79999 l
66.600014 308.19998 l
33.60001 308.19998 l
h
33.60001 316.79999 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
728.60004 291.20001 m
761.60004 291.20001 l
761.60004 299.80002 l
728.60004 299.80002 l
h
728.60004 291.20001 m
S
0 i
1 1 1 sc
CM
26.650023 310 m
146.65002 310 l
146.65002 190 l
26.650023 190 l
h
26.650023 310 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
721.65002 298 m
841.65002 298 l
841.65002 418 l
721.65002 418 l
h
721.65002 298 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
700.383 369.20001 m
(!")[ 8.896000 0.000000 ] xS
772.75403 435.60001 m
(!")[ 8.896000 0.000000 ] xS
853.40802 420.20001 m
(!)s
/Cs2 SC
1 1 0.25 sc
CM
26.650023 310 m
59.650024 310 l
59.650024 275.79999 l
26.650023 275.79999 l
h
26.650023 310 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
721.65002 298 m
754.65002 298 l
754.65002 332.20001 l
721.65002 332.20001 l
h
721.65002 298 m
S
2 w
861.75 357.64801 m
910.47504 357.67575 l
S
0 J
0 j
0 i
920.07501 357.68121 m
910.47504 357.67575 l
910.47705 354.07574 m
920.07501 357.68121 l
910.47296 361.27576 l
S
/Cs1 SC
0 sc
/F1.1[ 35 0 0 -35 0 0]sf
883.6275 368 m
(#)s
/Cs2 SC
1 1 0.25 sc
CM
361.40002 284.92801 m
461.20001 284.92801 l
461.20001 184.15199 l
361.40002 184.15199 l
h
361.40002 284.92801 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
1056.4 323.07199 m
1156.2001 323.07199 l
1156.2001 423.84799 l
1056.4 423.84799 l
h
1056.4 323.07199 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
1033.608 379.23599 m
("$)[ 8.896000 0.000000 ] xS
1097.4041 439.80002 m
("$)[ 8.896000 0.000000 ] xS
2 w
0.60000002 i
/Cs2 SC
0 0 0 sc
1003.8 357.49548 m
1037.7961 357.31754 l
S
0 J
0 j
0 i
1047.3961 357.26727 m
1037.7961 357.31754 l
1037.7773 353.71759 m
1047.3961 357.26727 l
1037.8151 360.91748 l
S
1 1 1 sc
CM
237.37502 291.42801 m
299.80002 291.42801 l
304.77057 291.42801 308.80002 287.39856 308.80002 282.42801 c
308.80002 218.15999 l
308.80002 213.18944 304.77057 209.15999 299.80002 209.15999 c
237.37502 209.15999 l
232.40446 209.15999 228.37502 213.18944 228.37502 218.15999 c
228.37502 282.42801 l
228.37502 287.39856 232.40446 291.42801 237.37502 291.42801 c
h
237.37502 291.42801 m
f
1 w
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
932.375 316.57199 m
994.79999 316.57199 l
999.77057 316.57199 1003.8 320.60144 1003.8 325.57199 c
1003.8 389.84 l
1003.8 394.81058 999.77057 398.84 994.79999 398.84 c
932.375 398.84 l
927.40448 398.84 923.375 394.81058 923.375 389.84 c
923.375 325.57199 l
923.375 320.60144 927.40448 316.57199 932.375 316.57199 c
h
932.375 316.57199 m
S
0 i
1 0.25 0.25 sc
CM
257.82703 274.436 m
290.82703 274.436 l
290.82703 240.23599 l
257.82703 240.23599 l
h
257.82703 274.436 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
952.82703 333.564 m
985.82703 333.564 l
985.82703 367.76401 l
952.82703 367.76401 l
h
952.82703 333.564 m
S
0 i
0.25 0.25 1 sc
CM
252.57503 268.836 m
285.57501 268.836 l
285.57501 234.63599 l
252.57503 234.63599 l
h
252.57503 268.836 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
947.57501 339.164 m
980.57501 339.164 l
980.57501 373.36401 l
947.57501 373.36401 l
h
947.57501 339.164 m
S
0 i
1 1 0.25 sc
CM
248.47902 262.73599 m
281.47903 262.73599 l
281.47903 228.536 l
248.47902 228.536 l
h
248.47902 262.73599 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
943.479 345.26401 m
976.479 345.26401 l
976.479 379.46402 l
943.479 379.46402 l
h
943.479 345.26401 m
S
/Cs1 SC
0 sc
0 i
931.67902 355.064 m
(%)s
955.53101 393.36401 m
(%)s
981.57501 385.164 m
(!)s
1176.7941 409.552 m
(!)s
/Cs2 SC
0.80000001 0.80000001 0.80000001 sc
CM
399.00052 80.197998 m
416.99652 80.197998 l
416.99652 60.197994 l
399.00052 60.197994 l
h
399.00052 80.197998 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
1094.0005 527.802 m
1111.9965 527.802 l
1111.9965 547.802 l
1094.0005 547.802 l
h
1094.0005 527.802 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 11 0 0 -11 0 0]sf
1085.8965 543.14801 m
(&)s
1099.9406 557.802 m
(&)s
1121.8945 548.60199 m
(!)s
/F1.1[ 13 0 0 -13 0 0]sf
1081.9755 510.60001 m
('\(\)*+,-./)[ 7.228000 7.228000 3.614000 6.734000 2.886000 4.095000 4.095000 7.462000 0.000000 ] xS
2 w
0.60000002 i
/Cs2 SC
0 0 0 sc
1106.4175 448.24802 m
1106.6853 480.70044 l
S
0 J
0 j
0 i
1106.7645 490.30011 m
1106.6853 480.70044 l
1110.2852 480.67072 m
1106.7645 490.30011 l
1103.0854 480.73016 l
S
1 1 1 sc
CM
173.59201 162.85199 m
273.39203 162.85199 l
273.39203 62.075996 l
173.59201 62.075996 l
h
173.59201 162.85199 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
868.59204 445.14801 m
968.39203 445.14801 l
968.39203 545.92401 l
868.59204 545.92401 l
h
868.59204 445.14801 m
S
0 i
1 1 1 sc
CM
169.71701 155.73999 m
269.517 155.73999 l
269.517 54.963997 l
169.71701 54.963997 l
h
169.71701 155.73999 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
864.71698 452.26001 m
964.51703 452.26001 l
964.51703 553.03601 l
864.71698 553.03601 l
h
864.71698 452.26001 m
S
0 i
1 1 1 sc
CM
166.13802 149.18799 m
265.93802 149.18799 l
265.93802 48.411995 l
166.13802 48.411995 l
h
166.13802 149.18799 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
861.138 458.81201 m
960.93799 458.81201 l
960.93799 559.58801 l
861.138 559.58801 l
h
861.138 458.81201 m
S
0 i
1 1 1 sc
CM
162.99202 140.91199 m
262.79202 140.91199 l
262.79202 40.135994 l
162.99202 40.135994 l
h
162.99202 140.91199 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
857.992 467.08801 m
957.79199 467.08801 l
957.79199 567.86401 l
857.992 567.86401 l
h
857.992 467.08801 m
S
0 i
1 1 1 sc
CM
159.13802 133.18799 m
258.93802 133.18799 l
258.93802 32.411995 l
159.13802 32.411995 l
h
159.13802 133.18799 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
854.138 474.81201 m
953.93799 474.81201 l
953.93799 575.58801 l
854.138 575.58801 l
h
854.138 474.81201 m
S
0 i
1 1 1 sc
CM
154.99202 125.91199 m
254.79201 125.91199 l
254.79201 25.135994 l
154.99202 25.135994 l
h
154.99202 125.91199 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -695 608 cm
849.992 482.08801 m
949.79199 482.08801 l
949.79199 582.86401 l
849.992 582.86401 l
h
849.992 482.08801 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
827.20001 538.25201 m
("$)[ 8.896000 0.000000 ] xS
890.99603 598.81598 m
("$)[ 8.896000 0.000000 ] xS
965.93799 568.56799 m
('\()[ 8.896000 0.000000 ] xS
2 w
0.60000002 i
/Cs2 SC
0 0 0 sc
1062.1426 533.20435 m
988.89984 533.54248 l
S
0 J
0 j
0 i
979.29999 533.58679 m
988.89984 533.54248 l
988.9165 537.1424 m
979.29999 533.58679 l
988.88324 529.9425 l
S
1 w
1 J
1 j
0.60000002 i
1156.2001 497.802 m
1156.2001 497.802 l
1161.1705 497.802 1165.2001 501.83145 1165.2001 506.802 c
1165.2001 525.15491 l
1165.2001 527.97516 1167.0171 530.47424 1169.7001 531.34369 c
1169.7001 531.34369 l
1170.5055 531.60468 1170.9468 532.46918 1170.6858 533.2746 c
1170.5342 533.74225 1170.1676 534.10883 1169.7001 534.26031 c
1169.7001 534.26031 l
1167.0171 535.12976 1165.2001 537.62885 1165.2001 540.4491 c
1165.2001 558.802 l
1165.2001 563.77258 1161.1705 567.802 1156.2001 567.802 c
1156.2001 567.802 l
S
/Cs1 SC
0 sc
0 i
/F1.1[ 13 0 0 -13 0 0]sf
1182.1643 526.72803 m
(0.12.+345.)[ 6.981000 7.462000 7.228000 6.500000 7.462000 2.886000 7.228000 6.981000 6.981000 0.000000 ] xS
1193.9553 542.09198 m
(6.1,37+)[ 7.709000 7.462000 7.228000 4.095000 7.228000 6.981000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
